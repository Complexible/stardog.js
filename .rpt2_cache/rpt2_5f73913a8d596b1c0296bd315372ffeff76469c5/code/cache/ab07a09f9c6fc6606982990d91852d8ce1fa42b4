{"map":"{\"version\":3,\"file\":\"graph.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../lib/db/graph.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,KAAK,EAAE,MAAM,aAAa,CAAC;AAClC,OAAO,EAGL,aAAa,GAEd,MAAM,cAAc,CAAC;AACtB,OAAO,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AAGtD,IAAM,yBAAyB,GAAG,kBAAkB,CAAC;IACnD,kBAAkB,EAAE,CAAC,WAAW,EAAE,aAAa,CAAC;CACjD,CAAC,CAAC;AAED,MAAM,CAAC,IAAM,QAAQ,GAAG,UAAC,EAKS;;QAJhC,0BAAU,EACV,sBAAQ,EACR,gBAAe,EAAf,oCAAe,EACf,sBAAmB,EAAnB,wCAAmB;IAEnB,IAAM,WAAW,GAAG,EAAE,CAAC,SAAS,CAC9B,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,aAAa,CAC/C,CAAC;IACF,OAAO,yBAAyB,CAAC;QAC/B,UAAU,YAAA;QACV,cAAc;YACZ,4BACE,cAAc,uBAAsB,uCAAuB;eAC9D;QACD,UAAU,EAAK,QAAQ,SAAI,WAAa;KACzC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,WAAW,GAAG,UAAC,EAIM;QAHhC,0BAAU,EACV,sBAAQ,EACR,gBAAe,EAAf,oCAAe;IAEf,IAAM,WAAW,GAAG,EAAE,CAAC,SAAS,CAC9B,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,aAAa,CAC/C,CAAC;IACF,OAAO,yBAAyB,CAAC;QAC/B,UAAU,YAAA;QACV,MAAM,uBAAsB;QAC5B,UAAU,EAAK,QAAQ,SAAI,WAAa;KACzC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,IAAM,UAAU,GAAG,UAAC,EAUnB;;QATC,0BAAU,EACV,sBAAQ,EACR,wBAAS,EACT,gCAAa,EACb,gBAAe,EAAf,oCAAe,EACf,sBAAmB,EAAnB,wCAAmB;IAKnB,IAAM,WAAW,GAAG,EAAE,CAAC,SAAS,CAC9B,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,aAAa,CAC/C,CAAC;IACF,OAAO,yBAAyB,CAAC;QAC/B,UAAU,YAAA;QACV,MAAM,EAAE,aAAa;QACrB,IAAI,EAAE,SAAS;QACf,cAAc;YACZ,wCACE,cAAc,mCAA4B,uCAAuB;eACpE;QACD,UAAU,EAAK,QAAQ,SAAI,WAAa;KACzC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,QAAQ,GAAG,UACtB,OAAgE;IAEhE,OAAA,UAAU,sBACL,OAAO,IACV,aAAa,qBACb;AAHF,CAGE,CAAC;AAEL,MAAM,CAAC,IAAM,aAAa,GAAG,UAC3B,QAAiE;IAEjE,OAAA,UAAU,sBACL,QAAQ,IACX,aAAa,uBACb;AAHF,CAGE,CAAC\"}","code":"import * as tslib_1 from \"tslib\";\r\n/**\r\n * @module stardogjs.db.graph\r\n */\r\nimport * as qs from 'querystring';\r\nimport { DEFAULT_GRAPH, } from '../constants';\r\nimport { getFetchDispatcher } from '../request-utils';\r\nvar dispatchFetchWithGraphUri = getFetchDispatcher({\r\n    allowedQueryParams: ['graph-uri', DEFAULT_GRAPH],\r\n});\r\nexport var getGraph = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection, database = _a.database, _c = _a.graphUri, graphUri = _c === void 0 ? null : _c, _d = _a.requestHeaders, requestHeaders = _d === void 0 ? {} : _d;\r\n    var queryString = qs.stringify(graphUri ? { graph: graphUri } : DEFAULT_GRAPH);\r\n    return dispatchFetchWithGraphUri({\r\n        connection: connection,\r\n        requestHeaders: (_b = {},\r\n            _b[\"Accept\" /* ACCEPT */] = requestHeaders[\"Accept\" /* ACCEPT */] || \"application/ld+json\" /* LD_JSON */,\r\n            _b),\r\n        pathSuffix: database + \"?\" + queryString,\r\n    });\r\n};\r\nexport var deleteGraph = function (_a) {\r\n    var connection = _a.connection, database = _a.database, _b = _a.graphUri, graphUri = _b === void 0 ? null : _b;\r\n    var queryString = qs.stringify(graphUri ? { graph: graphUri } : DEFAULT_GRAPH);\r\n    return dispatchFetchWithGraphUri({\r\n        connection: connection,\r\n        method: \"DELETE\" /* DELETE */,\r\n        pathSuffix: database + \"?\" + queryString,\r\n    });\r\n};\r\nvar submitJson = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection, database = _a.database, graphData = _a.graphData, requestMethod = _a.requestMethod, _c = _a.graphUri, graphUri = _c === void 0 ? null : _c, _d = _a.requestHeaders, requestHeaders = _d === void 0 ? {} : _d;\r\n    var queryString = qs.stringify(graphUri ? { graph: graphUri } : DEFAULT_GRAPH);\r\n    return dispatchFetchWithGraphUri({\r\n        connection: connection,\r\n        method: requestMethod,\r\n        body: graphData,\r\n        requestHeaders: (_b = {},\r\n            _b[\"Content-Type\" /* CONTENT_TYPE */] = requestHeaders[\"Content-Type\" /* CONTENT_TYPE */] || \"application/ld+json\" /* LD_JSON */,\r\n            _b),\r\n        pathSuffix: database + \"?\" + queryString,\r\n    });\r\n};\r\nexport var putGraph = function (putData) {\r\n    return submitJson(tslib_1.__assign({}, putData, { requestMethod: \"PUT\" /* PUT */ }));\r\n};\r\nexport var appendToGraph = function (postData) {\r\n    return submitJson(tslib_1.__assign({}, postData, { requestMethod: \"POST\" /* POST */ }));\r\n};\r\n//# sourceMappingURL=graph.js.map"}
