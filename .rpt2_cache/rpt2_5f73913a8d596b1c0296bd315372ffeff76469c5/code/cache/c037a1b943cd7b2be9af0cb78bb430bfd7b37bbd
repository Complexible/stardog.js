{"map":"{\"version\":3,\"file\":\"reasoning.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../lib/db/reasoning.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import * as tslib_1 from \"tslib\";\r\n/**\r\n * @module stardogjs.db.reasoning\r\n */\r\nimport { getFetchDispatcher } from '../request-utils';\r\n// TODO: Confirm whether this is really necessary.\r\nvar jsonify = function (res) {\r\n    res.headers.set(\"Content-Type\" /* CONTENT_TYPE */, \"application/json\" /* JSON */);\r\n    return res;\r\n};\r\nvar dispatchFetchWithGraphUri = getFetchDispatcher({\r\n    allowedQueryParams: ['graph-uri'],\r\n});\r\nexport var consistency = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection, database = _a.database, graphUri = _a.graphUri;\r\n    var params = graphUri ? { 'graph-uri': graphUri } : null;\r\n    return dispatchFetchWithGraphUri({\r\n        connection: connection,\r\n        pathSuffix: database + \"/reasoning/consistency\",\r\n        params: params,\r\n        requestHeaders: (_b = {},\r\n            _b[\"Accept\" /* ACCEPT */] = \"text/boolean\" /* TEXT_BOOLEAN */,\r\n            _b),\r\n    });\r\n};\r\n// contentType - application/x-turtle, text/turtle, application/rdf+xml, text/plain, application/x-trig, text/x-nquads, application/trix\r\nexport var explainInference = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection, database = _a.database, inference = _a.inference, _c = _a.requestHeaders, requestHeaders = _c === void 0 ? {} : _c;\r\n    return dispatchFetchWithGraphUri({\r\n        connection: connection,\r\n        method: \"POST\" /* POST */,\r\n        body: inference,\r\n        requestHeaders: (_b = {},\r\n            _b[\"Accept\" /* ACCEPT */] = \"application/json\" /* JSON */,\r\n            _b[\"Content-Type\" /* CONTENT_TYPE */] = requestHeaders[\"Content-Type\" /* CONTENT_TYPE */] || \"text/turtle\" /* TEXT_TURTLE */,\r\n            _b),\r\n        pathSuffix: database + \"/reasoning/explain\",\r\n    }).then(jsonify);\r\n};\r\nexport var explainInconsistency = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection, database = _a.database, graphUri = _a.graphUri;\r\n    var params = graphUri ? { 'graph-uri': graphUri } : null;\r\n    return dispatchFetchWithGraphUri({\r\n        connection: connection,\r\n        method: \"POST\" /* POST */,\r\n        requestHeaders: (_b = {},\r\n            _b[\"Accept\" /* ACCEPT */] = \"application/json\" /* JSON */,\r\n            _b),\r\n        params: params,\r\n        pathSuffix: database + \"/reasoning/explain/inconsistency\",\r\n    }).then(jsonify);\r\n};\r\n// contentType - application/x-turtle, text/turtle, application/rdf+xml, text/plain, application/x-trig, text/x-nquads, application/trix\r\nexport var explainInferenceInTransaction = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection, database = _a.database, transactionId = _a.transactionId, inference = _a.inference, _c = _a.requestHeaders, requestHeaders = _c === void 0 ? {} : _c;\r\n    return dispatchFetchWithGraphUri({\r\n        connection: connection,\r\n        method: \"POST\" /* POST */,\r\n        body: inference,\r\n        requestHeaders: tslib_1.__assign({}, requestHeaders, (_b = {}, _b[\"Content-Type\" /* CONTENT_TYPE */] = requestHeaders[\"Content-Type\" /* CONTENT_TYPE */] || \"text/turtle\" /* TEXT_TURTLE */, _b)),\r\n        pathSuffix: database + \"/reasoning/\" + transactionId + \"/explain\",\r\n    });\r\n};\r\nexport var explainInconsistencyInTransaction = function (_a) {\r\n    var connection = _a.connection, database = _a.database, transactionId = _a.transactionId, graphUri = _a.graphUri;\r\n    var params = graphUri ? { 'graph-uri': graphUri } : null;\r\n    return dispatchFetchWithGraphUri({\r\n        connection: connection,\r\n        method: \"POST\" /* POST */,\r\n        params: params,\r\n        pathSuffix: database + \"/reasoning/\" + transactionId + \"/explain/inconsistency\",\r\n    });\r\n};\r\nexport var schema = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection, database = _a.database;\r\n    return dispatchFetchWithGraphUri({\r\n        connection: connection,\r\n        requestHeaders: (_b = {},\r\n            _b[\"Accept\" /* ACCEPT */] = \"application/ld+json\" /* LD_JSON */,\r\n            _b),\r\n        pathSuffix: database + \"/reasoning/schema\",\r\n    });\r\n};\r\n//# sourceMappingURL=reasoning.js.map"}
