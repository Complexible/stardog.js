{"map":"{\"version\":3,\"file\":\"main.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../lib/db/main.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import FormData from 'form-data';\r\nimport flat from 'flat';\r\nimport { get as getOptions } from './options';\r\nimport { ALL_GRAPHS, } from '../constants';\r\nimport { getFetchDispatcher } from '../request-utils';\r\nvar namespacesRequestOptionsToGet = { database: { namespaces: true } };\r\nvar dispatchAdminDbFetch = getFetchDispatcher({\r\n    basePath: \"admin/databases\",\r\n    allowedQueryParams: ['graph-uri', 'to'],\r\n});\r\nvar dispatchFetchWithGraphUri = getFetchDispatcher({\r\n    allowedQueryParams: ['graph-uri'],\r\n});\r\nexport var create = function (_a) {\r\n    var connection = _a.connection, database = _a.database, _b = _a.databaseSettings, databaseSettings = _b === void 0 ? {} : _b, _c = _a.files, files = _c === void 0 ? [] : _c;\r\n    var dbOptions = flat(databaseSettings);\r\n    var body = new FormData();\r\n    body.append('root', JSON.stringify({\r\n        dbname: database,\r\n        options: dbOptions,\r\n        files: files,\r\n    }));\r\n    return dispatchAdminDbFetch({\r\n        connection: connection,\r\n        body: body,\r\n        method: \"POST\" /* POST */,\r\n        requestHeaders: body.getHeaders(),\r\n    });\r\n};\r\nexport var drop = function (_a) {\r\n    var connection = _a.connection, database = _a.database;\r\n    return dispatchAdminDbFetch({\r\n        connection: connection,\r\n        pathSuffix: database,\r\n        method: \"DELETE\" /* DELETE */,\r\n    });\r\n};\r\nexport var getDatabase = function (_a) {\r\n    var connection = _a.connection, database = _a.database;\r\n    return dispatchFetchWithGraphUri({\r\n        connection: connection,\r\n        pathSuffix: database,\r\n    });\r\n};\r\nexport var offline = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection, database = _a.database;\r\n    return dispatchAdminDbFetch({\r\n        connection: connection,\r\n        pathSuffix: database + \"/offline\",\r\n        method: \"PUT\" /* PUT */,\r\n        requestHeaders: (_b = {},\r\n            _b[\"Accept\" /* ACCEPT */] = \"application/json\" /* JSON */,\r\n            _b),\r\n    });\r\n};\r\nexport var online = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection, database = _a.database;\r\n    return dispatchAdminDbFetch({\r\n        connection: connection,\r\n        pathSuffix: database + \"/online\",\r\n        method: \"PUT\" /* PUT */,\r\n        requestHeaders: (_b = {},\r\n            _b[\"Accept\" /* ACCEPT */] = \"application/json\" /* JSON */,\r\n            _b),\r\n    });\r\n};\r\nexport var optimize = function (_a) {\r\n    var connection = _a.connection, database = _a.database;\r\n    return dispatchAdminDbFetch({\r\n        connection: connection,\r\n        pathSuffix: database + \"/optimize\",\r\n        method: \"PUT\" /* PUT */,\r\n    });\r\n};\r\nexport var copy = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection, database = _a.database, destination = _a.destination;\r\n    return dispatchAdminDbFetch({\r\n        connection: connection,\r\n        pathSuffix: database + \"/copy\",\r\n        method: \"PUT\" /* PUT */,\r\n        requestHeaders: (_b = {},\r\n            _b[\"Accept\" /* ACCEPT */] = \"application/json\" /* JSON */,\r\n            _b),\r\n        params: {\r\n            to: destination,\r\n        },\r\n    });\r\n};\r\nexport var list = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection;\r\n    return dispatchAdminDbFetch({\r\n        connection: connection,\r\n        requestHeaders: (_b = {},\r\n            _b[\"Accept\" /* ACCEPT */] = \"application/json\" /* JSON */,\r\n            _b),\r\n    });\r\n};\r\nexport var size = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection, database = _a.database;\r\n    return dispatchFetchWithGraphUri({\r\n        connection: connection,\r\n        requestHeaders: (_b = {},\r\n            _b[\"Accept\" /* ACCEPT */] = \"text/plain\" /* TEXT_PLAIN */,\r\n            _b),\r\n        pathSuffix: database + \"/size\",\r\n    });\r\n};\r\nexport var clear = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection, database = _a.database, transactionId = _a.transactionId, graphUri = _a.graphUri;\r\n    var params = graphUri ? { 'graph-uri': graphUri } : null;\r\n    return dispatchFetchWithGraphUri({\r\n        connection: connection,\r\n        params: params,\r\n        method: \"POST\" /* POST */,\r\n        pathSuffix: database + \"/\" + transactionId + \"/clear\",\r\n        requestHeaders: (_b = {},\r\n            _b[\"Accept\" /* ACCEPT */] = \"text/plain\" /* TEXT_PLAIN */,\r\n            _b),\r\n    }).then(function (res) {\r\n        var resClone = res.clone(); // just being safe, since we're mutating\r\n        resClone.transactionId = transactionId;\r\n        return resClone;\r\n    });\r\n};\r\nexport var add = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection, database = _a.database, transactionId = _a.transactionId, content = _a.content, graphUri = _a.graphUri, _c = _a.requestHeaders, requestHeaders = _c === void 0 ? {} : _c;\r\n    var params = graphUri ? { 'graph-uri': graphUri } : null;\r\n    var headers = (_b = {},\r\n        _b[\"Accept\" /* ACCEPT */] = \"text/plain\" /* TEXT_PLAIN */,\r\n        _b[\"Content-Type\" /* CONTENT_TYPE */] = requestHeaders[\"Content-Type\" /* CONTENT_TYPE */] || \"text/plain\" /* TEXT_PLAIN */,\r\n        _b);\r\n    if (requestHeaders[\"Content-Encoding\" /* CONTENT_ENCODING */]) {\r\n        headers[\"Content-Encoding\" /* CONTENT_ENCODING */] =\r\n            requestHeaders[\"Content-Encoding\" /* CONTENT_ENCODING */];\r\n    }\r\n    return dispatchFetchWithGraphUri({\r\n        connection: connection,\r\n        params: params,\r\n        method: \"POST\" /* POST */,\r\n        body: content,\r\n        requestHeaders: headers,\r\n        pathSuffix: database + \"/\" + transactionId + \"/add\",\r\n    }).then(function (res) {\r\n        var resClone = res.clone(); // just being safe, since we're mutating\r\n        resClone.transactionId = transactionId;\r\n        return resClone;\r\n    });\r\n};\r\nexport var remove = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection, database = _a.database, transactionId = _a.transactionId, content = _a.content, graphUri = _a.graphUri, _c = _a.requestHeaders, requestHeaders = _c === void 0 ? {} : _c;\r\n    var params = graphUri ? { 'graph-uri': graphUri } : null;\r\n    var headers = (_b = {},\r\n        _b[\"Accept\" /* ACCEPT */] = \"text/plain\" /* TEXT_PLAIN */,\r\n        _b[\"Content-Type\" /* CONTENT_TYPE */] = requestHeaders[\"Content-Type\" /* CONTENT_TYPE */] || \"text/plain\" /* TEXT_PLAIN */,\r\n        _b);\r\n    if (requestHeaders[\"Content-Encoding\" /* CONTENT_ENCODING */]) {\r\n        headers[\"Content-Encoding\" /* CONTENT_ENCODING */] =\r\n            requestHeaders[\"Content-Encoding\" /* CONTENT_ENCODING */];\r\n    }\r\n    return dispatchFetchWithGraphUri({\r\n        connection: connection,\r\n        params: params,\r\n        method: \"POST\" /* POST */,\r\n        body: content,\r\n        requestHeaders: headers,\r\n        pathSuffix: database + \"/\" + transactionId + \"/remove\",\r\n    }).then(function (res) {\r\n        var resClone = res.clone(); // just being safe, since we're mutating\r\n        resClone.transactionId = transactionId;\r\n        return resClone;\r\n    });\r\n};\r\nexport var namespaces = function (_a) {\r\n    var connection = _a.connection, database = _a.database;\r\n    return getOptions({\r\n        connection: connection,\r\n        database: database,\r\n        optionsToGet: namespacesRequestOptionsToGet,\r\n    }).then(function (res) {\r\n        var resClone = res.clone(); // just being safe, since we're mutating\r\n        var originalJsonFn = resClone.json.bind(resClone);\r\n        resClone.json = function () {\r\n            return originalJsonFn().then(function (json) {\r\n                var namespaces = json['database.namespaces'] || [];\r\n                return namespaces.reduce(function (namespacesMap, namespace) {\r\n                    var _a = namespace.split('='), key = _a[0], value = _a[1];\r\n                    namespacesMap[key] = value;\r\n                    return namespacesMap;\r\n                }, {});\r\n            });\r\n        };\r\n        return resClone;\r\n    });\r\n};\r\nexport var exportData = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection, database = _a.database, _c = _a.graphUri, graphUri = _c === void 0 ? ALL_GRAPHS : _c, _d = _a.requestHeaders, requestHeaders = _d === void 0 ? {} : _d;\r\n    return dispatchFetchWithGraphUri({\r\n        connection: connection,\r\n        requestHeaders: (_b = {},\r\n            _b[\"Accept\" /* ACCEPT */] = requestHeaders[\"Accept\" /* ACCEPT */] || \"application/ld+json\" /* LD_JSON */,\r\n            _b),\r\n        params: {\r\n            'graph-uri': graphUri,\r\n        },\r\n        pathSuffix: database + \"/export\",\r\n    });\r\n};\r\n//# sourceMappingURL=main.js.map","dts":{"name":"/Users/jason/Projects/stardog.js/db/main.d.ts","writeByteOrderMark":false,"text":"import { BaseDatabaseOptions, BaseOptions, BaseDatabaseOptionsWithGraphUri, DeepPartial } from '../types';\r\nexport declare const create: ({ connection, database, databaseSettings, files, }: BaseDatabaseOptions & {\r\n    databaseSettings?: DeepPartial<{\r\n        database: {\r\n            archetypes: any;\r\n            connection: {\r\n                timeout: any;\r\n            };\r\n            creator: any;\r\n            name: any;\r\n            namespaces: any;\r\n            online: any;\r\n            time: {\r\n                creation: any;\r\n                modification: any;\r\n            };\r\n        };\r\n        docs: {\r\n            default: {\r\n                rdf: {\r\n                    extractors: any;\r\n                };\r\n                text: {\r\n                    extractors: any;\r\n                };\r\n            };\r\n            filesystem: {\r\n                uri: any;\r\n            };\r\n            path: any;\r\n        };\r\n        icv: {\r\n            active: {\r\n                graphs: any;\r\n            };\r\n            consistency: {\r\n                automatic: any;\r\n            };\r\n            enabled: any;\r\n            reasoning: {\r\n                enabled: any;\r\n            };\r\n        };\r\n        index: {\r\n            differential: {\r\n                enable: {\r\n                    limit: any;\r\n                };\r\n                merge: {\r\n                    limit: any;\r\n                };\r\n                size: any;\r\n            };\r\n            disk: {\r\n                page: {\r\n                    count: {\r\n                        total: any;\r\n                        used: any;\r\n                    };\r\n                    fill: {\r\n                        ratio: any;\r\n                    };\r\n                };\r\n            };\r\n            last: {\r\n                tx: any;\r\n            };\r\n            literals: {\r\n                canonical: any;\r\n            };\r\n            named: {\r\n                graphs: any;\r\n            };\r\n            persist: any;\r\n            size: any;\r\n            statistics: {\r\n                update: {\r\n                    automatic: any;\r\n                };\r\n            };\r\n            type: any;\r\n        };\r\n        preserve: {\r\n            bnode: {\r\n                ids: any;\r\n            };\r\n        };\r\n        progress: {\r\n            monitor: {\r\n                enabled: any;\r\n            };\r\n        };\r\n        query: {\r\n            all: {\r\n                graphs: any;\r\n            };\r\n            plan: {\r\n                reuse: any;\r\n            };\r\n            timeout: any;\r\n        };\r\n        reasoning: {\r\n            approximate: any;\r\n            classify: {\r\n                eager: any;\r\n            };\r\n            consistency: {\r\n                automatic: any;\r\n            };\r\n            punning: {\r\n                enabled: any;\r\n            };\r\n            sameas: any;\r\n            schema: {\r\n                graphs: any;\r\n                timeout: any;\r\n            };\r\n            type: any;\r\n            virtual: {\r\n                graph: {\r\n                    enabled: any;\r\n                };\r\n            };\r\n        };\r\n        search: {\r\n            default: {\r\n                limit: any;\r\n            };\r\n            enabled: any;\r\n            index: {\r\n                datatypes: any;\r\n            };\r\n            reindex: {\r\n                tx: any;\r\n            };\r\n            wildcard: {\r\n                search: {\r\n                    enabled: any;\r\n                };\r\n            };\r\n        };\r\n        security: {\r\n            named: {\r\n                graphs: any;\r\n            };\r\n        };\r\n        spatial: {\r\n            enabled: any;\r\n            index: {\r\n                version: any;\r\n            };\r\n            precision: any;\r\n        };\r\n        strict: {\r\n            parsing: any;\r\n        };\r\n        transaction: {\r\n            isolation: any;\r\n            logging: any;\r\n        };\r\n        versioning: {\r\n            directory: any;\r\n            enabled: any;\r\n        };\r\n    }>;\r\n    files?: {\r\n        filename: string;\r\n    }[];\r\n}) => Promise<Response>;\r\nexport declare const drop: ({ connection, database }: BaseDatabaseOptions) => Promise<Response>;\r\nexport declare const getDatabase: ({ connection, database }: BaseDatabaseOptions) => Promise<Response>;\r\nexport declare const offline: ({ connection, database }: BaseDatabaseOptions) => Promise<Response>;\r\nexport declare const online: ({ connection, database }: BaseDatabaseOptions) => Promise<Response>;\r\nexport declare const optimize: ({ connection, database }: BaseDatabaseOptions) => Promise<Response>;\r\nexport declare const copy: ({ connection, database, destination, }: BaseDatabaseOptions & {\r\n    destination: string;\r\n}) => Promise<Response>;\r\nexport declare const list: ({ connection }: BaseOptions) => Promise<Response>;\r\nexport declare const size: ({ connection, database }: BaseDatabaseOptions) => Promise<Response>;\r\nexport declare const clear: ({ connection, database, transactionId, graphUri, }: BaseDatabaseOptionsWithGraphUri & {\r\n    transactionId: string;\r\n}) => Promise<Response & {\r\n    transactionId: string;\r\n}>;\r\nexport declare const add: ({ connection, database, transactionId, content, graphUri, requestHeaders, }: BaseDatabaseOptionsWithGraphUri & {\r\n    transactionId: string;\r\n    content: any;\r\n}) => Promise<Response & {\r\n    transactionId: string;\r\n}>;\r\nexport declare const remove: ({ connection, database, transactionId, content, graphUri, requestHeaders, }: BaseDatabaseOptionsWithGraphUri & {\r\n    transactionId: string;\r\n    content: any;\r\n}) => Promise<Response & {\r\n    transactionId: string;\r\n}>;\r\nexport declare const namespaces: ({ connection, database }: BaseDatabaseOptions) => Promise<Response>;\r\nexport declare const exportData: ({ connection, database, graphUri, requestHeaders, }: BaseDatabaseOptionsWithGraphUri) => Promise<Response>;\r\n"}}
