{"map":"{\"version\":3,\"file\":\"Connection.js\",\"sourceRoot\":\"\",\"sources\":[\"../../lib/Connection.ts\"],\"names\":[],\"mappings\":\";AAAA,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,SAAS,CAAC;AAkB3C;IAME,oBAAY,OAAuC;QAAvC,wBAAA,EAAA,YAAuC;QACjD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAC1B,CAAC;IAED,8BAAS,GAAT,UAAU,OAAkC;QAC1C,IAAM,MAAM,wBACP,IAAI,EACJ,OAAO,CACX,CAAC;QAEF,+CAA+C;QAC/C,IACE,MAAM,CAAC,QAAQ;YACf,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAC/D;YACA,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SAChD;QAED,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IAC1B,CAAC;IAED,4BAAO,GAAP;QACE,IAAM,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;QAC9B,OAAO,CAAC,GAAG,sCAET,WAAS,IAAI,CAAI,IAAI,CAAC,QAAQ,SAAI,IAAI,CAAC,QAAU,CAAG,CACrD,CAAC;QACF,OAAO,CAAC,GAAG,wCAAuC,CAAC;QAEnD,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACxC,OAAO,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;SAC7C;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,wBAAG,GAAH;QAAI,kBAAqB;aAArB,UAAqB,EAArB,qBAAqB,EAArB,IAAqB;YAArB,6BAAqB;;QACvB,OAAU,IAAI,CAAC,QAAQ,SAAI,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAG,CAAC;IAClE,CAAC;IAED,4BAAO,GAAP;QAAQ,kBAAqB;aAArB,UAAqB,EAArB,qBAAqB,EAArB,IAAqB;YAArB,6BAAqB;;QAC3B,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YAC1C,yEAAyE;YACzE,8DAA8D;YAC9D,qEAAqE;YACrE,yEAAyE;YACzE,iEAAiE;YACjE,OAAO,IAAI,CAAC,GAAG,OAAR,IAAI,EAAQ,QAAQ,EAAE;SAC9B;QAED,OAAO,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;YAC7B,GAAG,EAAE,IAAI,CAAC,GAAG,OAAR,IAAI,EAAQ,QAAQ,CAAC;YAC1B,yEAAyE;YACzE,mEAAmE;YACnE,6BAA6B;YAC7B,OAAO,SAAA;SACR,CAAC,CAAC;IACL,CAAC;IACH,iBAAC;AAAD,CAAC,AAnED,IAmEC\"}","code":"import * as tslib_1 from \"tslib\";\r\nimport { Headers, Request } from './fetch';\r\nvar Connection = /** @class */ (function () {\r\n    function Connection(options) {\r\n        if (options === void 0) { options = {}; }\r\n        this.configure(options);\r\n    }\r\n    Connection.prototype.configure = function (options) {\r\n        var config = tslib_1.__assign({}, this, options);\r\n        // If the endpoint ends with '/', slice it off.\r\n        if (config.endpoint &&\r\n            config.endpoint.lastIndexOf('/') === config.endpoint.length - 1) {\r\n            config.endpoint = config.endpoint.slice(0, -1);\r\n        }\r\n        this.endpoint = config.endpoint;\r\n        this.username = config.username;\r\n        this.password = config.password;\r\n        this.meta = config.meta;\r\n    };\r\n    Connection.prototype.headers = function () {\r\n        var headers = new Headers();\r\n        headers.set(\"Authorization\" /* AUTHORIZATION */, \"Basic \" + btoa(this.username + \":\" + this.password));\r\n        headers.set(\"Accept\" /* ACCEPT */, \"*/*\" /* ALL */);\r\n        if (this.meta && this.meta.createHeaders) {\r\n            return this.meta.createHeaders({ headers: headers });\r\n        }\r\n        return headers;\r\n    };\r\n    Connection.prototype.uri = function () {\r\n        var resource = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            resource[_i] = arguments[_i];\r\n        }\r\n        return this.endpoint + \"/\" + resource.filter(Boolean).join('/');\r\n    };\r\n    Connection.prototype.request = function () {\r\n        var resource = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            resource[_i] = arguments[_i];\r\n        }\r\n        if (!this.meta || !this.meta.createRequest) {\r\n            // We *could* just return a new Request from this method at all times (in\r\n            // this case, just `new Request(this.uri(...resource))`), but,\r\n            // unfortunately, `new Request` throws an error in Firefox if the URI\r\n            // string includes credentials, which would plausibly count as a breaking\r\n            // change to stardog.js. Something to consider for later, though.\r\n            return this.uri.apply(this, resource);\r\n        }\r\n        return this.meta.createRequest({\r\n            uri: this.uri.apply(this, resource),\r\n            // The Request constructor is passed here as a convenience, since it will\r\n            // vary based on whether this library is being used in Node-like or\r\n            // browser-like environments.\r\n            Request: Request,\r\n        });\r\n    };\r\n    return Connection;\r\n}());\r\nexport { Connection };\r\n//# sourceMappingURL=Connection.js.map","dts":{"name":"/Users/jason/Projects/stardog.js/dist/weee/Connection.d.ts","writeByteOrderMark":false,"text":"import { Request } from './fetch';\r\nexport interface ConnectionMeta {\r\n    createHeaders?(headersHolder: {\r\n        headers: Headers;\r\n    }): Headers;\r\n    createRequest?(requestData: {\r\n        uri: string;\r\n        Request: typeof Request;\r\n    }): string | Request;\r\n}\r\nexport interface ConnectionConfig {\r\n    endpoint: string;\r\n    username: string;\r\n    password: string;\r\n    meta?: ConnectionMeta;\r\n}\r\nexport declare class Connection {\r\n    endpoint: string;\r\n    username: string;\r\n    password: string;\r\n    meta?: ConnectionMeta;\r\n    constructor(options?: Partial<ConnectionConfig>);\r\n    configure(options: Partial<ConnectionConfig>): void;\r\n    headers(): Headers;\r\n    uri(...resource: string[]): string;\r\n    request(...resource: string[]): string | Request;\r\n}\r\n"}}
