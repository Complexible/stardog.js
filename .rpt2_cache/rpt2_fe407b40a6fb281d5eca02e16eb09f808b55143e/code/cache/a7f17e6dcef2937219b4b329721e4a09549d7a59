{"map":"{\"version\":3,\"file\":\"icv.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../lib/db/icv.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import * as tslib_1 from \"tslib\";\r\nimport { getFetchDispatcher } from '../request-utils';\r\nvar dispatchFetchWithGraphUri = getFetchDispatcher({\r\n    allowedQueryParams: ['graph-uri'],\r\n});\r\nexport var get = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection, database = _a.database;\r\n    return dispatchFetchWithGraphUri({\r\n        connection: connection,\r\n        requestHeaders: (_b = {},\r\n            _b[\"Accept\" /* ACCEPT */] = \"application/ld+json\" /* LD_JSON */,\r\n            _b),\r\n        pathSuffix: database + \"/icv\",\r\n    });\r\n};\r\nexport var clear = function (_a) {\r\n    var connection = _a.connection, database = _a.database;\r\n    return dispatchFetchWithGraphUri({\r\n        connection: connection,\r\n        method: \"POST\" /* POST */,\r\n        pathSuffix: database + \"/icv/clear\",\r\n    });\r\n};\r\nvar postIcv = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection, database = _a.database, icvAxioms = _a.icvAxioms, resource = _a.resource, graphUri = _a.graphUri, _c = _a.requestHeaders, requestHeaders = _c === void 0 ? {} : _c;\r\n    var params = graphUri ? { 'graph-uri': graphUri } : null;\r\n    return dispatchFetchWithGraphUri({\r\n        connection: connection,\r\n        method: \"POST\" /* POST */,\r\n        body: icvAxioms,\r\n        params: params,\r\n        requestHeaders: tslib_1.__assign({}, requestHeaders, (_b = {}, _b[\"Content-Type\" /* CONTENT_TYPE */] = requestHeaders[\"Content-Type\" /* CONTENT_TYPE */] || \"text/turtle\" /* TEXT_TURTLE */, _b)),\r\n        pathSuffix: database + \"/icv/\" + resource,\r\n    });\r\n};\r\nexport var add = function (icvRequestData) {\r\n    return postIcv(tslib_1.__assign({}, icvRequestData, { resource: 'add' }));\r\n};\r\nexport var remove = function (icvRequestData) {\r\n    return postIcv(tslib_1.__assign({}, icvRequestData, { resource: 'remove' }));\r\n};\r\nexport var convert = function (_a) {\r\n    var icvAxioms = _a.icvAxioms, icvRequestData = tslib_1.__rest(_a, [\"icvAxioms\"]);\r\n    return postIcv(tslib_1.__assign({}, icvRequestData, { icvAxioms: icvAxioms, resource: 'convert' }));\r\n};\r\nexport var validate = function (_a) {\r\n    var _b;\r\n    var icvAxioms = _a.icvAxioms, _c = _a.requestHeaders, requestHeaders = _c === void 0 ? {} : _c, icvRequestData = tslib_1.__rest(_a, [\"icvAxioms\", \"requestHeaders\"]);\r\n    return postIcv(tslib_1.__assign({}, icvRequestData, { icvAxioms: icvAxioms, resource: 'validate', requestHeaders: tslib_1.__assign({}, requestHeaders, (_b = {}, _b[\"Accept\" /* ACCEPT */] = \"text/boolean\" /* TEXT_BOOLEAN */, _b)) }));\r\n};\r\nexport var validateInTx = function (_a) {\r\n    var _b;\r\n    var transactionId = _a.transactionId, icvAxioms = _a.icvAxioms, _c = _a.requestHeaders, requestHeaders = _c === void 0 ? {} : _c, icvRequestData = tslib_1.__rest(_a, [\"transactionId\", \"icvAxioms\", \"requestHeaders\"]);\r\n    return postIcv(tslib_1.__assign({}, icvRequestData, { icvAxioms: icvAxioms, resource: transactionId + \"/validate\", requestHeaders: tslib_1.__assign({}, requestHeaders, (_b = {}, _b[\"Accept\" /* ACCEPT */] = \"text/boolean\" /* TEXT_BOOLEAN */, _b)) }));\r\n};\r\nexport var violations = function (_a) {\r\n    var _b;\r\n    var icvAxioms = _a.icvAxioms, _c = _a.requestHeaders, requestHeaders = _c === void 0 ? {} : _c, icvRequestData = tslib_1.__rest(_a, [\"icvAxioms\", \"requestHeaders\"]);\r\n    return postIcv(tslib_1.__assign({}, icvRequestData, { icvAxioms: icvAxioms, resource: 'violations', requestHeaders: tslib_1.__assign({}, requestHeaders, (_b = {}, _b[\"Accept\" /* ACCEPT */] = \"*/*\" /* ALL */, _b)) }));\r\n};\r\nexport var violationsInTx = function (_a) {\r\n    var _b;\r\n    var transactionId = _a.transactionId, icvAxioms = _a.icvAxioms, _c = _a.requestHeaders, requestHeaders = _c === void 0 ? {} : _c, icvRequestData = tslib_1.__rest(_a, [\"transactionId\", \"icvAxioms\", \"requestHeaders\"]);\r\n    return postIcv(tslib_1.__assign({}, icvRequestData, { icvAxioms: icvAxioms, resource: transactionId + \"/violations\", requestHeaders: tslib_1.__assign({}, requestHeaders, (_b = {}, _b[\"Accept\" /* ACCEPT */] = \"*/*\" /* ALL */, _b)) }));\r\n};\r\nexport var report = function (_a) {\r\n    var _b;\r\n    var icvAxioms = _a.icvAxioms, _c = _a.requestHeaders, requestHeaders = _c === void 0 ? {} : _c, icvRequestData = tslib_1.__rest(_a, [\"icvAxioms\", \"requestHeaders\"]);\r\n    return postIcv(tslib_1.__assign({}, icvRequestData, { icvAxioms: icvAxioms, resource: 'report', requestHeaders: tslib_1.__assign({}, requestHeaders, (_b = {}, _b[\"Accept\" /* ACCEPT */] = \"application/ld+json\" /* LD_JSON */, _b)) }));\r\n};\r\nexport var reportInTx = function (_a) {\r\n    var _b;\r\n    var transactionId = _a.transactionId, icvAxioms = _a.icvAxioms, _c = _a.requestHeaders, requestHeaders = _c === void 0 ? {} : _c, icvRequestData = tslib_1.__rest(_a, [\"transactionId\", \"icvAxioms\", \"requestHeaders\"]);\r\n    return postIcv(tslib_1.__assign({}, icvRequestData, { icvAxioms: icvAxioms, resource: transactionId + \"/report\", requestHeaders: tslib_1.__assign({}, requestHeaders, (_b = {}, _b[\"Accept\" /* ACCEPT */] = \"application/ld+json\" /* LD_JSON */, _b)) }));\r\n};\r\n//# sourceMappingURL=icv.js.map","dts":{"name":"/Users/jason/Projects/stardog.js/dist/weee/db/icv.d.ts","writeByteOrderMark":false,"text":"import { BaseDatabaseOptions, BaseDatabaseOptionsWithGraphUri } from '../types';\r\nexport declare const get: ({ connection, database }: BaseDatabaseOptions) => Promise<Response>;\r\nexport declare const clear: ({ connection, database }: BaseDatabaseOptions) => Promise<Response>;\r\nexport declare const add: (icvRequestData: BaseDatabaseOptions & {\r\n    icvAxioms: string;\r\n}) => Promise<Response>;\r\nexport declare const remove: (icvRequestData: BaseDatabaseOptions & {\r\n    icvAxioms: string;\r\n}) => Promise<Response>;\r\nexport declare const convert: ({ icvAxioms, ...icvRequestData }: BaseDatabaseOptionsWithGraphUri & {\r\n    icvAxioms: string;\r\n}) => Promise<Response>;\r\nexport declare const validate: ({ icvAxioms, requestHeaders, ...icvRequestData }: BaseDatabaseOptionsWithGraphUri & {\r\n    icvAxioms: string;\r\n}) => Promise<Response>;\r\nexport declare const validateInTx: ({ transactionId, icvAxioms, requestHeaders, ...icvRequestData }: BaseDatabaseOptionsWithGraphUri & {\r\n    icvAxioms: string;\r\n    transactionId: string;\r\n}) => Promise<Response>;\r\nexport declare const violations: ({ icvAxioms, requestHeaders, ...icvRequestData }: BaseDatabaseOptionsWithGraphUri & {\r\n    icvAxioms: string;\r\n}) => Promise<Response>;\r\nexport declare const violationsInTx: ({ transactionId, icvAxioms, requestHeaders, ...icvRequestData }: BaseDatabaseOptionsWithGraphUri & {\r\n    icvAxioms: string;\r\n    transactionId: string;\r\n}) => Promise<Response>;\r\nexport declare const report: ({ icvAxioms, requestHeaders, ...icvRequestData }: BaseDatabaseOptionsWithGraphUri & {\r\n    icvAxioms: string;\r\n}) => Promise<Response>;\r\nexport declare const reportInTx: ({ transactionId, icvAxioms, requestHeaders, ...icvRequestData }: BaseDatabaseOptionsWithGraphUri & {\r\n    icvAxioms: string;\r\n    transactionId: string;\r\n}) => Promise<Response>;\r\n"}}
