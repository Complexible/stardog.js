{"map":"{\"version\":3,\"file\":\"options.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../lib/db/options.ts\"],\"names\":[],\"mappings\":\"AACA,OAAO,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AAEtD,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,MAAM,MAAM,cAAc,CAAC;AAElC,IAAM,oBAAoB,GAAG,kBAAkB,CAAC;IAC9C,QAAQ,EAAE,iBAAiB;IAC3B,kBAAkB,EAAE,EAAE;CACvB,CAAC,CAAC;AAEH,MAAM,CAAC,IAAM,GAAG,GAAG,UAAC,EAIkD;;QAHpE,0BAAU,EACV,sBAAQ,EACR,oBAAqB,EAArB,0CAAqB;IAErB,OAAA,oBAAoB,CAAC;QACnB,UAAU,YAAA;QACV,MAAM,iBAAmB;QACzB,cAAc;YACZ,qEAA8C;eAC/C;QACD,UAAU,EAAK,QAAQ,aAAU;QACjC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;KACzD,CAAC;AARF,CAQE,CAAC;AACL,qBAAqB;AACrB,4CAA4C;AAC5C,eAAe;AACf,gBAAgB;AAChB,wCAAwC;AACxC,SAAS;AACT,MAAM;AACN,gBAAgB;AAChB,MAAM;AAEN,MAAM,CAAC,IAAM,GAAG,GAAG,UAAC,EAIoD;;QAHtE,0BAAU,EACV,sBAAQ,EACR,oCAAe;IAEf,OAAA,oBAAoB,CAAC;QACnB,UAAU,YAAA;QACV,MAAM,mBAAoB;QAC1B,cAAc;YACZ,qEAA8C;eAC/C;QACD,UAAU,EAAK,QAAQ,aAAU;QACjC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;KAC5D,CAAC;AARF,CAQE,CAAC\"}","code":"import { getFetchDispatcher } from '../request-utils';\r\nimport flat from 'flat';\r\nimport dbopts from '../db/dbopts';\r\nvar dispatchAdminDbFetch = getFetchDispatcher({\r\n    basePath: \"admin/databases\",\r\n    allowedQueryParams: [],\r\n});\r\nexport var get = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection, database = _a.database, _c = _a.optionsToGet, optionsToGet = _c === void 0 ? dbopts : _c;\r\n    return dispatchAdminDbFetch({\r\n        connection: connection,\r\n        method: \"PUT\" /* PUT */,\r\n        requestHeaders: (_b = {},\r\n            _b[\"Content-Type\" /* CONTENT_TYPE */] = \"application/json\" /* JSON */,\r\n            _b),\r\n        pathSuffix: database + \"/options\",\r\n        body: JSON.stringify(flat(optionsToGet, { safe: true })),\r\n    });\r\n};\r\n// }).then((res) => {\r\n//   if (res.status === ResponseStatus.OK) {\r\n//     return {\r\n//       ...res,\r\n//       body: flat.unflatten(res.body),\r\n//     };\r\n//   }\r\n//   return res;\r\n// });\r\nexport var set = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection, database = _a.database, databaseOptions = _a.databaseOptions;\r\n    return dispatchAdminDbFetch({\r\n        connection: connection,\r\n        method: \"POST\" /* POST */,\r\n        requestHeaders: (_b = {},\r\n            _b[\"Content-Type\" /* CONTENT_TYPE */] = \"application/json\" /* JSON */,\r\n            _b),\r\n        pathSuffix: database + \"/options\",\r\n        body: JSON.stringify(flat(databaseOptions, { safe: true })),\r\n    });\r\n};\r\n//# sourceMappingURL=options.js.map","dts":{"name":"/Users/jason/Projects/stardog.js/dist/weee/db/options.d.ts","writeByteOrderMark":false,"text":"import { BaseDatabaseOptions, DeepPartial } from '../types';\r\nexport declare const get: ({ connection, database, optionsToGet, }: BaseDatabaseOptions & {\r\n    optionsToGet?: DeepPartial<{\r\n        database: {\r\n            archetypes: any;\r\n            connection: {\r\n                timeout: any;\r\n            };\r\n            creator: any;\r\n            name: any;\r\n            namespaces: any;\r\n            online: any;\r\n            time: {\r\n                creation: any;\r\n                modification: any;\r\n            };\r\n        };\r\n        docs: {\r\n            default: {\r\n                rdf: {\r\n                    extractors: any;\r\n                };\r\n                text: {\r\n                    extractors: any;\r\n                };\r\n            };\r\n            filesystem: {\r\n                uri: any;\r\n            };\r\n            path: any;\r\n        };\r\n        icv: {\r\n            active: {\r\n                graphs: any;\r\n            };\r\n            consistency: {\r\n                automatic: any;\r\n            };\r\n            enabled: any;\r\n            reasoning: {\r\n                enabled: any;\r\n            };\r\n        };\r\n        index: {\r\n            differential: {\r\n                enable: {\r\n                    limit: any;\r\n                };\r\n                merge: {\r\n                    limit: any;\r\n                };\r\n                size: any;\r\n            };\r\n            disk: {\r\n                page: {\r\n                    count: {\r\n                        total: any;\r\n                        used: any;\r\n                    };\r\n                    fill: {\r\n                        ratio: any;\r\n                    };\r\n                };\r\n            };\r\n            last: {\r\n                tx: any;\r\n            };\r\n            literals: {\r\n                canonical: any;\r\n            };\r\n            named: {\r\n                graphs: any;\r\n            };\r\n            persist: any;\r\n            size: any;\r\n            statistics: {\r\n                update: {\r\n                    automatic: any;\r\n                };\r\n            };\r\n            type: any;\r\n        };\r\n        preserve: {\r\n            bnode: {\r\n                ids: any;\r\n            };\r\n        };\r\n        progress: {\r\n            monitor: {\r\n                enabled: any;\r\n            };\r\n        };\r\n        query: {\r\n            all: {\r\n                graphs: any;\r\n            };\r\n            plan: {\r\n                reuse: any;\r\n            };\r\n            timeout: any;\r\n        };\r\n        reasoning: {\r\n            approximate: any;\r\n            classify: {\r\n                eager: any;\r\n            };\r\n            consistency: {\r\n                automatic: any;\r\n            };\r\n            punning: {\r\n                enabled: any;\r\n            };\r\n            sameas: any;\r\n            schema: {\r\n                graphs: any;\r\n                timeout: any;\r\n            };\r\n            type: any;\r\n            virtual: {\r\n                graph: {\r\n                    enabled: any;\r\n                };\r\n            };\r\n        };\r\n        search: {\r\n            default: {\r\n                limit: any;\r\n            };\r\n            enabled: any;\r\n            index: {\r\n                datatypes: any;\r\n            };\r\n            reindex: {\r\n                tx: any;\r\n            };\r\n            wildcard: {\r\n                search: {\r\n                    enabled: any;\r\n                };\r\n            };\r\n        };\r\n        security: {\r\n            named: {\r\n                graphs: any;\r\n            };\r\n        };\r\n        spatial: {\r\n            enabled: any;\r\n            index: {\r\n                version: any;\r\n            };\r\n            precision: any;\r\n        };\r\n        strict: {\r\n            parsing: any;\r\n        };\r\n        transaction: {\r\n            isolation: any;\r\n            logging: any;\r\n        };\r\n        versioning: {\r\n            directory: any;\r\n            enabled: any;\r\n        };\r\n    }>;\r\n}) => Promise<Response>;\r\nexport declare const set: ({ connection, database, databaseOptions, }: BaseDatabaseOptions & {\r\n    databaseOptions: DeepPartial<{\r\n        database: {\r\n            archetypes: any;\r\n            connection: {\r\n                timeout: any;\r\n            };\r\n            creator: any;\r\n            name: any;\r\n            namespaces: any;\r\n            online: any;\r\n            time: {\r\n                creation: any;\r\n                modification: any;\r\n            };\r\n        };\r\n        docs: {\r\n            default: {\r\n                rdf: {\r\n                    extractors: any;\r\n                };\r\n                text: {\r\n                    extractors: any;\r\n                };\r\n            };\r\n            filesystem: {\r\n                uri: any;\r\n            };\r\n            path: any;\r\n        };\r\n        icv: {\r\n            active: {\r\n                graphs: any;\r\n            };\r\n            consistency: {\r\n                automatic: any;\r\n            };\r\n            enabled: any;\r\n            reasoning: {\r\n                enabled: any;\r\n            };\r\n        };\r\n        index: {\r\n            differential: {\r\n                enable: {\r\n                    limit: any;\r\n                };\r\n                merge: {\r\n                    limit: any;\r\n                };\r\n                size: any;\r\n            };\r\n            disk: {\r\n                page: {\r\n                    count: {\r\n                        total: any;\r\n                        used: any;\r\n                    };\r\n                    fill: {\r\n                        ratio: any;\r\n                    };\r\n                };\r\n            };\r\n            last: {\r\n                tx: any;\r\n            };\r\n            literals: {\r\n                canonical: any;\r\n            };\r\n            named: {\r\n                graphs: any;\r\n            };\r\n            persist: any;\r\n            size: any;\r\n            statistics: {\r\n                update: {\r\n                    automatic: any;\r\n                };\r\n            };\r\n            type: any;\r\n        };\r\n        preserve: {\r\n            bnode: {\r\n                ids: any;\r\n            };\r\n        };\r\n        progress: {\r\n            monitor: {\r\n                enabled: any;\r\n            };\r\n        };\r\n        query: {\r\n            all: {\r\n                graphs: any;\r\n            };\r\n            plan: {\r\n                reuse: any;\r\n            };\r\n            timeout: any;\r\n        };\r\n        reasoning: {\r\n            approximate: any;\r\n            classify: {\r\n                eager: any;\r\n            };\r\n            consistency: {\r\n                automatic: any;\r\n            };\r\n            punning: {\r\n                enabled: any;\r\n            };\r\n            sameas: any;\r\n            schema: {\r\n                graphs: any;\r\n                timeout: any;\r\n            };\r\n            type: any;\r\n            virtual: {\r\n                graph: {\r\n                    enabled: any;\r\n                };\r\n            };\r\n        };\r\n        search: {\r\n            default: {\r\n                limit: any;\r\n            };\r\n            enabled: any;\r\n            index: {\r\n                datatypes: any;\r\n            };\r\n            reindex: {\r\n                tx: any;\r\n            };\r\n            wildcard: {\r\n                search: {\r\n                    enabled: any;\r\n                };\r\n            };\r\n        };\r\n        security: {\r\n            named: {\r\n                graphs: any;\r\n            };\r\n        };\r\n        spatial: {\r\n            enabled: any;\r\n            index: {\r\n                version: any;\r\n            };\r\n            precision: any;\r\n        };\r\n        strict: {\r\n            parsing: any;\r\n        };\r\n        transaction: {\r\n            isolation: any;\r\n            logging: any;\r\n        };\r\n        versioning: {\r\n            directory: any;\r\n            enabled: any;\r\n        };\r\n    }>;\r\n}) => Promise<Response>;\r\n"}}
