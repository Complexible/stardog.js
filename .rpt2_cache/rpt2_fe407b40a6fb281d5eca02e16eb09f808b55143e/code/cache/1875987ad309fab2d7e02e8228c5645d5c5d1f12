{"map":"{\"version\":3,\"file\":\"main.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../lib/virtual-graph/main.ts\"],\"names\":[],\"mappings\":\";AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AAStD,IAAM,eAAe,GAAG,kBAAkB,CAAC;IACzC,QAAQ,EAAE,sBAAsB;IAChC,kBAAkB,EAAE,EAAE;CACvB,CAAC,CAAC;AAEH,IAAM,sBAAsB;IAC1B,qEAA8C;OAC/C,CAAC;AAEF,MAAM,CAAC,IAAM,IAAI,GAAG,UAAC,EAA2B;QAAzB,0BAAU;IAC/B,OAAA,eAAe,CAAC;QACd,UAAU,YAAA;KACX,CAAC;AAFF,CAEE,CAAC;AAEL,IAAM,mBAAmB,GAAG,UAC1B,EAQC,EACD,MAAqB,EACrB,UAAe;QATb,0BAAU,EACV,cAAI,EACJ,sBAAQ,EACR,oBAAO;IAMT,2BAAA,EAAA,eAAe;IAEf,OAAA,eAAe,CAAC;QACd,UAAU,YAAA;QACV,MAAM,QAAA;QACN,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;YACnB,IAAI,MAAA;YACJ,QAAQ,UAAA;YACR,OAAO,SAAA;SACR,CAAC;QACF,cAAc,EAAE,sBAAsB;QACtC,UAAU,YAAA;KACX,CAAC;AAVF,CAUE,CAAC;AAEL,MAAM,CAAC,IAAM,GAAG,GAAG,UACjB,MAGC,IACE,OAAA,mBAAmB,CAAC,MAAM,oBAAqB,EAA/C,CAA+C,CAAC;AAErD,MAAM,CAAC,IAAM,MAAM,GAAG,UACpB,MAGC,IACE,OAAA,mBAAmB,CAAC,MAAM,mBAAqB,IAAI,CAAC,EAApD,CAAoD,CAAC;AAE1D,MAAM,CAAC,IAAM,MAAM,GAAG,UAAC,EAA6C;QAA3C,0BAAU,EAAE,cAAI;IACvC,OAAA,eAAe,CAAC;QACd,UAAU,YAAA;QACV,MAAM,uBAAsB;QAC5B,UAAU,EAAE,IAAI;KACjB,CAAC;AAJF,CAIE,CAAC;AAEL,MAAM,CAAC,IAAM,SAAS,GAAG,UAAC,EAA6C;;QAA3C,0BAAU,EAAE,cAAI;IAC1C,OAAA,eAAe,CAAC;QACd,UAAU,YAAA;QACV,cAAc;YACZ,yDAAwC;eACzC;QACD,UAAU,EAAK,IAAI,eAAY;KAChC,CAAC;AANF,CAME,CAAC;AAEL,MAAM,CAAC,IAAM,OAAO,GAAG,UAAC,EAA6C;QAA3C,0BAAU,EAAE,cAAI;IACxC,OAAA,eAAe,CAAC;QACd,UAAU,YAAA;QACV,UAAU,EAAK,IAAI,aAAU;KAC9B,CAAC;AAHF,CAGE,CAAC;AAEL,MAAM,CAAC,IAAM,QAAQ,GAAG,UAAC,EAI+C;QAHtE,0BAAU,EACV,cAAI,EACJ,sBAAmB,EAAnB,wCAAmB;IAEnB,IAAI,UAAU,GAAM,IAAI,cAAW,CAAC;IAEpC,IAAI,cAAc,CAAC,mBAAmB,EAAE;QACtC,kEAAkE;QAClE,wEAAwE;QACxE,4BAA4B;QAC5B,IAAM,MAAM,GAAG,cAAc,CAAC,MAAM,IAAI,MAAM,CAAC;QAC/C,UAAU,GAAM,IAAI,wBAAmB,MAAQ,CAAC;KACjD;IAED,OAAO,eAAe,CAAC;QACrB,UAAU,YAAA;QACV,UAAU,YAAA;KACX,CAAC,CAAC;AACL,CAAC,CAAC\"}","code":"var _a;\r\nimport { getFetchDispatcher } from '../request-utils';\r\nvar dispatchVgFetch = getFetchDispatcher({\r\n    basePath: 'admin/virtual_graphs',\r\n    allowedQueryParams: [],\r\n});\r\nvar jsonContentTypeHeaders = (_a = {},\r\n    _a[\"Content-Type\" /* CONTENT_TYPE */] = \"application/json\" /* JSON */,\r\n    _a);\r\nexport var list = function (_a) {\r\n    var connection = _a.connection;\r\n    return dispatchVgFetch({\r\n        connection: connection,\r\n    });\r\n};\r\nvar dispatchAddOrUpdate = function (_a, method, pathSuffix) {\r\n    var connection = _a.connection, name = _a.name, mappings = _a.mappings, options = _a.options;\r\n    if (pathSuffix === void 0) { pathSuffix = ''; }\r\n    return dispatchVgFetch({\r\n        connection: connection,\r\n        method: method,\r\n        body: JSON.stringify({\r\n            name: name,\r\n            mappings: mappings,\r\n            options: options,\r\n        }),\r\n        requestHeaders: jsonContentTypeHeaders,\r\n        pathSuffix: pathSuffix,\r\n    });\r\n};\r\nexport var add = function (vgData) { return dispatchAddOrUpdate(vgData, \"POST\" /* POST */); };\r\nexport var update = function (vgData) { return dispatchAddOrUpdate(vgData, \"PUT\" /* PUT */, name); };\r\nexport var remove = function (_a) {\r\n    var connection = _a.connection, name = _a.name;\r\n    return dispatchVgFetch({\r\n        connection: connection,\r\n        method: \"DELETE\" /* DELETE */,\r\n        pathSuffix: name,\r\n    });\r\n};\r\nexport var available = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection, name = _a.name;\r\n    return dispatchVgFetch({\r\n        connection: connection,\r\n        requestHeaders: (_b = {},\r\n            _b[\"Accept\" /* ACCEPT */] = \"application/json\" /* JSON */,\r\n            _b),\r\n        pathSuffix: name + \"/available\",\r\n    });\r\n};\r\nexport var options = function (_a) {\r\n    var connection = _a.connection, name = _a.name;\r\n    return dispatchVgFetch({\r\n        connection: connection,\r\n        pathSuffix: name + \"/options\",\r\n    });\r\n};\r\nexport var mappings = function (_a) {\r\n    var connection = _a.connection, name = _a.name, _b = _a.requestOptions, requestOptions = _b === void 0 ? {} : _b;\r\n    var pathSuffix = name + \"/mappings\";\r\n    if (requestOptions.preferUntransformed) {\r\n        // Try to get the mappings string that was last submitted, not the\r\n        // transformed mappings. (If syntax doesn't match, however, you'll still\r\n        // get generated mapptings.)\r\n        var syntax = requestOptions.syntax || 'SMS2';\r\n        pathSuffix = name + \"/mappingsString/\" + syntax;\r\n    }\r\n    return dispatchVgFetch({\r\n        connection: connection,\r\n        pathSuffix: pathSuffix,\r\n    });\r\n};\r\n//# sourceMappingURL=main.js.map","dts":{"name":"/Users/jason/Projects/stardog.js/dist/weee/virtual-graph/main.d.ts","writeByteOrderMark":false,"text":"import { JsonPrimitive, BaseVirtualGraphOptions, BaseOptions } from '../types';\r\nexport interface MappingsRequestOptions {\r\n    preferUntransformed?: boolean;\r\n    syntax?: string;\r\n}\r\nexport declare const list: ({ connection }: BaseOptions) => Promise<Response>;\r\nexport declare const add: (vgData: BaseVirtualGraphOptions & {\r\n    mappings: string;\r\n    options: {\r\n        [key: string]: JsonPrimitive;\r\n    };\r\n}) => Promise<Response>;\r\nexport declare const update: (vgData: BaseVirtualGraphOptions & {\r\n    mappings: string;\r\n    options: {\r\n        [key: string]: JsonPrimitive;\r\n    };\r\n}) => Promise<Response>;\r\nexport declare const remove: ({ connection, name }: BaseVirtualGraphOptions) => Promise<Response>;\r\nexport declare const available: ({ connection, name }: BaseVirtualGraphOptions) => Promise<Response>;\r\nexport declare const options: ({ connection, name }: BaseVirtualGraphOptions) => Promise<Response>;\r\nexport declare const mappings: ({ connection, name, requestOptions, }: BaseVirtualGraphOptions & {\r\n    requestOptions?: MappingsRequestOptions;\r\n}) => Promise<Response>;\r\n"}}
