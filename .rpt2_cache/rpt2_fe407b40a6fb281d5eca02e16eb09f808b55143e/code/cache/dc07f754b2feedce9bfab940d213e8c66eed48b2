{"map":"{\"version\":3,\"file\":\"versioning.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../lib/db/versioning.ts\"],\"names\":[],\"mappings\":\";AAAA,OAAO,KAAK,EAAE,MAAM,aAAa,CAAC;AAClC,OAAO,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAC;AAG1C,OAAO,EACL,kBAAkB,EAClB,oBAAoB,GAErB,MAAM,kBAAkB,CAAC;AAE1B,MAAM,CAAC,IAAM,YAAY,GAAG,UAAC,EAc5B;;QAbC,0BAAU,EACV,sBAAQ,EACR,gBAAK,EACL,sBAEC,EAFD;;gBAEC,EACD,cAAW,EAAX,gCAAW;IAQX,IAAM,aAAa,GAAG,kBAAkB,CAAC;QACvC,kBAAkB,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;KACxC,CAAC,CAAC;IAEH,OAAO,aAAa,CAAC;QACnB,UAAU,YAAA;QACV,MAAM,mBAAoB;QAC1B,IAAI,EAAE,EAAE,CAAC,SAAS,CAAC,EAAE,KAAK,OAAA,EAAE,CAAC;QAC7B,cAAc,uBACT,cAAc,mHAElB;QACD,MAAM,EAAE,MAAa;QACrB,UAAU,EAAK,QAAQ,eAAY;KACpC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,IAAM,eAAe,GAAG,UAAC,EAGJ;;IAFnB,IAAA,sBAAmB,EAAnB,wCAAmB,EACnB,6CAAO;IAEP,OAAA,oBAAoB,sBACf,IAAI,IACP,MAAM,qBACN,cAAc,uBACT,cAAc,2FAGnB,CAAA;CAAA,CAAC;AAEL,MAAM,CAAC,IAAM,MAAM,GAAG,UAAC,EAK8C;QAJnE,0BAAU,EACV,sBAAQ,EACR,gCAAa,EACb,wBAAS;IAET,OAAA,eAAe,CAAC;QACd,UAAU,YAAA;QACV,IAAI,EAAE,SAAS;QACf,UAAU,EAAK,QAAQ,aAAQ,aAAa,gBAAa;KAC1D,CAAC;AAJF,CAIE,CAAC;AAEL,MAAM,CAAC,IAAM,SAAS,GAAG,UAAC,EAKsC;QAJ9D,0BAAU,EACV,sBAAQ,EACR,0BAAU,EACV,oBAAO;IAEP,OAAA,eAAe,CAAC;QACd,UAAU,YAAA;QACV,IAAI,EAAE,0CAAuC,UAAU,cAAO,OAAO,OAAG;QACxE,UAAU,EAAK,QAAQ,qBAAkB;KAC1C,CAAC;AAJF,CAIE,CAAC;AAEL,MAAM,CAAC,IAAM,SAAS,GAAG,UAAC,EAIkB;QAH1C,0BAAU,EACV,sBAAQ,EACR,oBAAO;IAEP,OAAA,eAAe,CAAC;QACd,UAAU,YAAA;QACV,IAAI,EAAE,OAAO;QACb,UAAU,EAAK,QAAQ,qBAAkB;KAC1C,CAAC;AAJF,CAIE,CAAC;AAEL,MAAM,CAAC,IAAM,MAAM,GAAG,UAAC,EAUtB;QATC,0BAAU,EACV,sBAAQ,EACR,kCAAc,EACd,8BAAY,EACZ,kBAAM;IAMN,OAAA,eAAe,CAAC;QACd,UAAU,YAAA;QACV,IAAI,EAAE,0CAAuC,YAAY,iDAA0C,cAAc,cAAO,MAAM,OAAG;QACjI,UAAU,EAAK,QAAQ,gBAAa;KACrC,CAAC;AAJF,CAIE,CAAC\"}","code":"import * as tslib_1 from \"tslib\";\r\nimport * as qs from 'querystring';\r\nimport { mimeType } from '../query/utils';\r\nimport { getFetchDispatcher, dispatchGenericFetch, } from '../request-utils';\r\nexport var executeQuery = function (_a) {\r\n    var _b, _c;\r\n    var connection = _a.connection, database = _a.database, query = _a.query, _d = _a.requestHeaders, requestHeaders = _d === void 0 ? (_b = {},\r\n        _b[\"Accept\" /* ACCEPT */] = mimeType(query),\r\n        _b) : _d, _e = _a.params, params = _e === void 0 ? {} : _e;\r\n    var dispatchFetch = getFetchDispatcher({\r\n        allowedQueryParams: Object.keys(params),\r\n    });\r\n    return dispatchFetch({\r\n        connection: connection,\r\n        method: \"POST\" /* POST */,\r\n        body: qs.stringify({ query: query }),\r\n        requestHeaders: tslib_1.__assign({}, requestHeaders, (_c = {}, _c[\"Content-Type\" /* CONTENT_TYPE */] = \"application/x-www-form-urlencoded\" /* FORM_URLENCODED */, _c)),\r\n        params: params,\r\n        pathSuffix: database + \"/vcs/query\",\r\n    });\r\n};\r\nvar postAsPlainText = function (_a) {\r\n    var _b;\r\n    var _c = _a.requestHeaders, requestHeaders = _c === void 0 ? {} : _c, args = tslib_1.__rest(_a, [\"requestHeaders\"]);\r\n    return dispatchGenericFetch(tslib_1.__assign({}, args, { method: \"POST\" /* POST */, requestHeaders: tslib_1.__assign({}, requestHeaders, (_b = {}, _b[\"Content-Type\" /* CONTENT_TYPE */] = \"text/plain\" /* TEXT_PLAIN */, _b)) }));\r\n};\r\nexport var commit = function (_a) {\r\n    var connection = _a.connection, database = _a.database, transactionId = _a.transactionId, commitMsg = _a.commitMsg;\r\n    return postAsPlainText({\r\n        connection: connection,\r\n        body: commitMsg,\r\n        pathSuffix: database + \"/vcs/\" + transactionId + \"/commit_msg\",\r\n    });\r\n};\r\nexport var createTag = function (_a) {\r\n    var connection = _a.connection, database = _a.database, revisionId = _a.revisionId, tagName = _a.tagName;\r\n    return postAsPlainText({\r\n        connection: connection,\r\n        body: \"\\\"tag:stardog:api:versioning:version:\" + revisionId + \"\\\", \\\"\" + tagName + \"\\\"\",\r\n        pathSuffix: database + \"/vcs/tags/create\",\r\n    });\r\n};\r\nexport var deleteTag = function (_a) {\r\n    var connection = _a.connection, database = _a.database, tagName = _a.tagName;\r\n    return postAsPlainText({\r\n        connection: connection,\r\n        body: tagName,\r\n        pathSuffix: database + \"/vcs/tags/delete\",\r\n    });\r\n};\r\nexport var revert = function (_a) {\r\n    var connection = _a.connection, database = _a.database, fromRevisionId = _a.fromRevisionId, toRevisionId = _a.toRevisionId, logMsg = _a.logMsg;\r\n    return postAsPlainText({\r\n        connection: connection,\r\n        body: \"\\\"tag:stardog:api:versioning:version:\" + toRevisionId + \"\\\", \\\"tag:stardog:api:versioning:version:\" + fromRevisionId + \"\\\", \\\"\" + logMsg + \"\\\"\",\r\n        pathSuffix: database + \"/vcs/revert\",\r\n    });\r\n};\r\n//# sourceMappingURL=versioning.js.map","dts":{"name":"/Users/jason/Projects/stardog.js/dist/weee/db/versioning.d.ts","writeByteOrderMark":false,"text":"import { BaseDatabaseOptions, JsonValue } from '../types';\r\nimport { RequestHeader } from '../constants';\r\nexport declare const executeQuery: ({ connection, database, query, requestHeaders, params, }: BaseDatabaseOptions & {\r\n    requestHeaders?: import(\"../types\").RequestHeaders & {\r\n        [RequestHeader.ACCEPT]: string;\r\n    };\r\n    query: string;\r\n    params?: JsonValue;\r\n}) => Promise<Response>;\r\nexport declare const commit: ({ connection, database, transactionId, commitMsg, }: BaseDatabaseOptions & {\r\n    transactionId: string;\r\n    commitMsg: string;\r\n}) => Promise<Response>;\r\nexport declare const createTag: ({ connection, database, revisionId, tagName, }: BaseDatabaseOptions & {\r\n    revisionId: string;\r\n    tagName: string;\r\n}) => Promise<Response>;\r\nexport declare const deleteTag: ({ connection, database, tagName, }: BaseDatabaseOptions & {\r\n    tagName: string;\r\n}) => Promise<Response>;\r\nexport declare const revert: ({ connection, database, fromRevisionId, toRevisionId, logMsg, }: BaseDatabaseOptions & {\r\n    fromRevisionId: string;\r\n    toRevisionId: string;\r\n    logMsg: string;\r\n}) => Promise<Response>;\r\n"}}
