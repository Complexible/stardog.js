{"map":"{\"version\":3,\"file\":\"namespaces.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../lib/db/namespaces.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,QAAQ,MAAM,WAAW,CAAC;AAGjC,OAAO,EAAE,oBAAoB,EAAE,MAAM,kBAAkB,CAAC;AAExD,MAAM,CAAC,IAAM,GAAG,GAAG,UAAC,EAA6C;;QAA3C,0BAAU,EAAE,sBAAQ;IACxC,OAAA,oBAAoB,CAAC;QACnB,UAAU,YAAA;QACV,UAAU,EAAK,QAAQ,gBAAa;QACpC,cAAc;YACZ,yDAAwC;eACzC;KACF,CAAC,CAAC,IAAI,CAAC,UAAC,GAAQ;QACf,IAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,QAAQ,CAAC,IAAI,GAAG;YACd,OAAA,GAAG;iBACA,IAAI,EAAE;iBACN,IAAI,CAAC,UAAC,IAAwD;gBAC7D,OAAA,IAAI,CAAC,UAAU,CAAC,MAAM,CACpB,UAAC,IAAI,EAAE,EAAgB;;wBAAd,kBAAM,EAAE,cAAI;oBAAO,OAAA,sBACvB,IAAI,eACN,MAAM,IAAG,IAAI,OACd;gBAH0B,CAG1B,EACF,EAAkC,CACnC;YAND,CAMC,CACF;QAVH,CAUG,CAAC;QACN,OAAO,QAAQ,CAAC;IAClB,CAAC,CAAC;AArBF,CAqBE,CAAC;AAEL,MAAM,CAAC,IAAM,GAAG,GAAG,UAAC,EAQnB;;QAPC,0BAAU,EACV,sBAAQ,EACR,kCAAc,EACd,eAAY,EAAZ,iCAAY;IAKZ,IAAI,cAAc;QAChB,yDAAwC;WACzC,CAAC;IACF,IAAI,IAAuB,CAAC;IAE5B,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE;QACtC,cAAc,mCAA4B;YACxC,OAAO,CAAC,WAAW,mCAA2B,CAAC;QACjD,IAAI,GAAG,cAAc,CAAC;KACvB;SAAM;QACL,IAAI,GAAG,IAAI,QAAQ,EAAE,CAAC;QACtB,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,cAAqB,CAAC,CAAC;QAC7C,cAAc,wBACT,cAAc,EACd,IAAI,CAAC,UAAU,EAAE,CACrB,CAAC;KACH;IAED,OAAO,oBAAoB,CAAC;QAC1B,IAAI,EAAE,IAAW;QACjB,UAAU,YAAA;QACV,MAAM,mBAAoB;QAC1B,UAAU,EAAK,QAAQ,gBAAa;QACpC,cAAc,gBAAA;KACf,CAAC,CAAC;AACL,CAAC,CAAC\"}","code":"import * as tslib_1 from \"tslib\";\r\n/**\r\n * @module stardogjs.db.namespaces\r\n */\r\nimport FormData from 'form-data';\r\nimport { dispatchGenericFetch } from '../request-utils';\r\nexport var get = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection, database = _a.database;\r\n    return dispatchGenericFetch({\r\n        connection: connection,\r\n        pathSuffix: database + \"/namespaces\",\r\n        requestHeaders: (_b = {},\r\n            _b[\"Accept\" /* ACCEPT */] = \"application/json\" /* JSON */,\r\n            _b),\r\n    }).then(function (res) {\r\n        var resClone = res.clone();\r\n        resClone.json = function () {\r\n            return res\r\n                .json()\r\n                .then(function (json) {\r\n                return json.namespaces.reduce(function (memo, _a) {\r\n                    var _b;\r\n                    var prefix = _a.prefix, name = _a.name;\r\n                    return (tslib_1.__assign({}, memo, (_b = {}, _b[prefix] = name, _b)));\r\n                }, {});\r\n            });\r\n        };\r\n        return resClone;\r\n    });\r\n};\r\nexport var add = function (_a) {\r\n    var _b;\r\n    var connection = _a.connection, database = _a.database, fileOrContents = _a.fileOrContents, _c = _a.options, options = _c === void 0 ? {} : _c;\r\n    var requestHeaders = (_b = {},\r\n        _b[\"Accept\" /* ACCEPT */] = \"application/json\" /* JSON */,\r\n        _b);\r\n    var body;\r\n    if (typeof fileOrContents === 'string') {\r\n        requestHeaders[\"Content-Type\" /* CONTENT_TYPE */] =\r\n            options.contentType || \"text/turtle\" /* TEXT_TURTLE */;\r\n        body = fileOrContents;\r\n    }\r\n    else {\r\n        body = new FormData();\r\n        body.append('upload', fileOrContents);\r\n        requestHeaders = tslib_1.__assign({}, requestHeaders, body.getHeaders());\r\n    }\r\n    return dispatchGenericFetch({\r\n        body: body,\r\n        connection: connection,\r\n        method: \"POST\" /* POST */,\r\n        pathSuffix: database + \"/namespaces\",\r\n        requestHeaders: requestHeaders,\r\n    });\r\n};\r\n//# sourceMappingURL=namespaces.js.map"}
