{"map":"{\"version\":3,\"file\":\"response-transforms.js\",\"sourceRoot\":\"\",\"sources\":[\"../../lib/response-transforms.ts\"],\"names\":[],\"mappings\":\"AAAA,iBAoCA;;AApCA,OAAO,UAAU,MAAM,aAAa,CAAC;AAIrC,IAAM,eAAe,GAAG;IAAqB,cAAU;SAAV,UAAU,EAAV,qBAAU,EAAV,IAAU;QAAV,yBAAU;;IAAQ,OAAA,IAAI;AAAJ,CAAI,CAAC;AACpE,IAAM,MAAM,GAAG,eAAe,CAAC,QAAQ,EAAE,YAAY,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;AAG/E,MAAM,CAAC,IAAM,QAAQ,GAAG,UAAO,GAAa;;;;;gBACpC,WAAW,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,mCAA4B,CAAC;gBAC1D,QAAQ,GAAqD,UAAU,CAC3E,GAAG,EACH,MAAM,CACA,CAAC;qBAEL,CAAA,WAAW,IAAI,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA,EAA/C,wBAA+C;gBACjD,KAAA,QAAQ,CAAA;gBAAQ,qBAAM,GAAG,CAAC,IAAI,EAAE,EAAA;;gBAAhC,GAAS,IAAI,GAAG,SAAgB,CAAC;gBACjC,sBAAO,QAAQ,EAAC;oBAGL,qBAAM,GAAG,CAAC,IAAI,EAAE,EAAA;;gBAAvB,IAAI,GAAG,SAAgB;gBAC7B,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;gBAE5B,IAAI,WAAW,sCAA6B,EAAE;oBAC5C,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC;iBAC/C;gBAED,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,IAAI,IAAI,KAAK,EAAE,EAAE;oBACrC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;iBACtB;gBAED,sBAAO,QAAQ,EAAC;;;KACjB,CAAC;AAEF,MAAM,CAAC,IAAM,WAAW,GAAG,UAAC,GAAa;IACvC,OAAA,UAAU,CAAC,GAAG,EAAE,MAAM,CAA2B;AAAjD,CAAiD,CAAC\"}","code":"var _this = this;\r\nimport * as tslib_1 from \"tslib\";\r\nimport lodashPick from 'lodash.pick';\r\nvar getAsTypedTuple = function () {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    return args;\r\n};\r\nvar FIELDS = getAsTypedTuple('status', 'statusText', 'headers', 'ok', 'url');\r\nexport var httpBody = function (res) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n    var contentType, response, _a, body;\r\n    return tslib_1.__generator(this, function (_b) {\r\n        switch (_b.label) {\r\n            case 0:\r\n                contentType = res.headers.get(\"Content-Type\" /* CONTENT_TYPE */);\r\n                response = lodashPick(res, FIELDS);\r\n                if (!(contentType && contentType.indexOf('json') > -1)) return [3 /*break*/, 2];\r\n                _a = response;\r\n                return [4 /*yield*/, res.json()];\r\n            case 1:\r\n                _a.body = _b.sent();\r\n                return [2 /*return*/, response];\r\n            case 2: return [4 /*yield*/, res.text()];\r\n            case 3:\r\n                body = _b.sent();\r\n                response.body = body.trim();\r\n                if (contentType === \"text/boolean\" /* TEXT_BOOLEAN */) {\r\n                    response.body = body.toLowerCase() === 'true';\r\n                }\r\n                if (res.status === 204 || body === '') {\r\n                    response.body = null;\r\n                }\r\n                return [2 /*return*/, response];\r\n        }\r\n    });\r\n}); };\r\nexport var httpMessage = function (res) {\r\n    return lodashPick(res, FIELDS);\r\n};\r\n//# sourceMappingURL=response-transforms.js.map","dts":{"name":"/Users/jason/Projects/stardog.js/response-transforms.d.ts","writeByteOrderMark":false,"text":"import { JsonPrimitive } from './types';\r\nexport declare const httpBody: (res: Response) => Promise<Pick<Response, \"status\" | \"statusText\" | \"headers\" | \"ok\" | \"url\"> & {\r\n    body: JsonPrimitive;\r\n}>;\r\nexport declare const httpMessage: (res: Response) => Pick<Response, \"status\" | \"statusText\" | \"headers\" | \"ok\" | \"url\">;\r\n"}}
