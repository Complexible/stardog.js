{"map":"{\"version\":3,\"file\":\"request-utils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../lib/request-utils.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import { fetch } from './fetch';\r\nimport qs from 'querystring';\r\nvar getRequestInit = function (_a) {\r\n    var connection = _a.connection, _b = _a.method, method = _b === void 0 ? \"GET\" /* GET */ : _b, body = _a.body, requestHeaders = _a.requestHeaders;\r\n    var headers = connection.headers();\r\n    if (requestHeaders) {\r\n        Object.keys(requestHeaders).forEach(function (headerKey) {\r\n            return headers.set(headerKey, requestHeaders[headerKey]);\r\n        });\r\n    }\r\n    return {\r\n        method: method,\r\n        body: body,\r\n        headers: headers,\r\n    };\r\n};\r\n// Uses the provided connection, basePath, pathSuffix (if any), params (if\r\n// any), and map of allowed query params (if any) to construct and return a\r\n// complete Stardog resource URL, including the connection's endpoint URL, the\r\n// base path, the path suffix (if any), and a query string containing any\r\n// allowed query params found on `params`.\r\nvar getRequestInfo = function (_a) {\r\n    var connection = _a.connection, basePath = _a.basePath, pathSuffix = _a.pathSuffix, allowedParamsMap = _a.allowedParamsMap, params = _a.params;\r\n    if (!params) {\r\n        // No params, so nothing to do.\r\n        return connection.request(basePath, pathSuffix);\r\n    }\r\n    if (!allowedParamsMap) {\r\n        // No restrictions specified, so all params allowed.\r\n        var queryString_1 = qs.stringify(params);\r\n        return connection.request(basePath, \"\" + pathSuffix + (queryString_1 ? \"?\" + queryString_1 : ''));\r\n    }\r\n    var paramsKeys = Object.keys(params);\r\n    if (paramsKeys.length === 0) {\r\n        // Empty params objects, so also nothing to do. (Not checked earlier to avoid unnecessary computation.)\r\n        return connection.request(basePath, pathSuffix);\r\n    }\r\n    var queryParamsMap = paramsKeys.reduce(function (paramsMap, param) {\r\n        if (!allowedParamsMap[param]) {\r\n            return paramsMap;\r\n        }\r\n        paramsMap[param] = params[param];\r\n        return paramsMap;\r\n    }, {});\r\n    var queryString = qs.stringify(queryParamsMap);\r\n    return connection.request(basePath, \"\" + pathSuffix + (queryString ? \"?\" + queryString : ''));\r\n};\r\n// Returns a function that can be used to call `fetch` with a predefined base\r\n// URL and with certain other tedious tasks automated. For example, the\r\n// function converts `params` objects to query strings (filtering out query\r\n// params that are not allowed), converts the provided map of request headers to\r\n// a `Headers` instance, prepends the connection's `endpoint` URL and the\r\n// defined `basePath` to the `fetch` URL, and so on.\r\nexport var getFetchDispatcher = function (_a) {\r\n    var _b = _a === void 0 ? {} : _a, _c = _b.basePath, basePath = _c === void 0 ? '' : _c, allowedQueryParams = _b.allowedQueryParams;\r\n    // Construct a map for quick look-ups.\r\n    var allowedParamsMap = !allowedQueryParams\r\n        ? null\r\n        : allowedQueryParams.reduce(function (paramsMap, param) {\r\n            paramsMap[param] = true;\r\n            return paramsMap;\r\n        }, {});\r\n    return function (_a) {\r\n        var connection = _a.connection, _b = _a.method, method = _b === void 0 ? \"GET\" /* GET */ : _b, body = _a.body, requestHeaders = _a.requestHeaders, params = _a.params, _c = _a.pathSuffix, pathSuffix = _c === void 0 ? '' : _c;\r\n        return fetch(getRequestInfo({\r\n            connection: connection,\r\n            basePath: basePath,\r\n            pathSuffix: pathSuffix,\r\n            allowedParamsMap: allowedParamsMap,\r\n            params: params,\r\n        }), getRequestInit({ connection: connection, method: method, body: body, requestHeaders: requestHeaders }));\r\n    };\r\n};\r\nexport var dispatchGenericFetch = getFetchDispatcher();\r\n//# sourceMappingURL=request-utils.js.map","dts":{"name":"/Users/jason/Projects/stardog.js/request-utils.d.ts","writeByteOrderMark":false,"text":"import { RequestMethod } from './constants';\r\nimport { BaseOptionsWithRequestHeaders } from './types';\r\nexport declare const getFetchDispatcher: <T extends string>({ basePath, allowedQueryParams, }?: {\r\n    basePath?: string;\r\n    allowedQueryParams?: T[];\r\n}) => ({ connection, method, body, requestHeaders, params, pathSuffix, }: BaseOptionsWithRequestHeaders & {\r\n    method?: RequestMethod;\r\n    body?: BodyInit;\r\n    params?: T[] extends void[] ? never : { [K in T]?: string; };\r\n    pathSuffix?: string;\r\n}) => Promise<Response>;\r\nexport declare const dispatchGenericFetch: ({ connection, method, body, requestHeaders, params, pathSuffix, }: BaseOptionsWithRequestHeaders & {\r\n    method?: RequestMethod;\r\n    body?: BodyInit;\r\n    params?: {\r\n        [x: string]: string;\r\n    };\r\n    pathSuffix?: string;\r\n}) => Promise<Response>;\r\nexport declare type GenericFetchParams = Parameters<typeof dispatchGenericFetch>[0];\r\n"}}
